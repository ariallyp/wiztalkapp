
package com.yuanxin.app.app.wsdl.wcf;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

import org.springframework.beans.factory.annotation.Value;

import com.yuanxin.app.app.wsdl.service.wsdlLoactionCache;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "WcfApplicationService", targetNamespace = "http://tempuri.org/", wsdlLocation = "http://localhost/PREasc.WcfHost/WcfApplicationService.svc?wsdl")
public class WcfApplicationService
    extends Service
{

    private final static URL WCFAPPLICATIONSERVICE_WSDL_LOCATION;
    private final static WebServiceException WCFAPPLICATIONSERVICE_EXCEPTION;
    private final static QName WCFAPPLICATIONSERVICE_QNAME = new QName("http://tempuri.org/", "WcfApplicationService");
    
    static {
        URL url = null;
        WebServiceException e = null;
        try {
            url = new URL(wsdlLoactionCache.getInstance().getWsdlsite()+wsdlLoactionCache.getInstance().getAppwsdl());
        } catch (MalformedURLException ex) {
            e = new WebServiceException(ex);
        }
        WCFAPPLICATIONSERVICE_WSDL_LOCATION = url;
        WCFAPPLICATIONSERVICE_EXCEPTION = e;
    }

    public WcfApplicationService() {
        super(__getWsdlLocation(), WCFAPPLICATIONSERVICE_QNAME);
    }

    public WcfApplicationService(WebServiceFeature... features) {
        super(__getWsdlLocation(), WCFAPPLICATIONSERVICE_QNAME, features);
    }

    public WcfApplicationService(URL wsdlLocation) {
        super(wsdlLocation, WCFAPPLICATIONSERVICE_QNAME);
    }

    public WcfApplicationService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, WCFAPPLICATIONSERVICE_QNAME, features);
    }

    public WcfApplicationService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WcfApplicationService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

  
	/**
     * 
     * @return
     *     returns IApplicationService
     */
    @WebEndpoint(name = "BasicHttpBinding_IApplicationService")
    public IApplicationService getBasicHttpBindingIApplicationService() {
        return super.getPort(new QName("http://tempuri.org/", "BasicHttpBinding_IApplicationService"), IApplicationService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns IApplicationService
     */
    @WebEndpoint(name = "BasicHttpBinding_IApplicationService")
    public IApplicationService getBasicHttpBindingIApplicationService(WebServiceFeature... features) {
        return super.getPort(new QName("http://tempuri.org/", "BasicHttpBinding_IApplicationService"), IApplicationService.class, features);
    }

    private static URL __getWsdlLocation() {
        if (WCFAPPLICATIONSERVICE_EXCEPTION!= null) {
            throw WCFAPPLICATIONSERVICE_EXCEPTION;
        }
        return WCFAPPLICATIONSERVICE_WSDL_LOCATION;
    }

}
